"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const infrastructure_1 = __importDefault(require("./infrastructure"));
const error_1 = require("./utils/error");
function serializeArg(arg) {
    return arg === undefined ? 'undefined' : JSON.stringify(arg);
}
function serializeFunc(func, ...rest) {
    return `(${func})(${rest.map(serializeArg).join(',')})`;
}
class Page extends infrastructure_1.default {
    goto(url) {
        this.push(() => __awaiter(this, void 0, void 0, function* () { return yield this.page.goto(url); }), error_1.prepareStackTrace());
        return this;
    }
    newPage(name = '', options = {}) {
        this.push(() => __awaiter(this, void 0, void 0, function* () {
            let index = this.pages.findIndex(page => page.name === name);
            if (index !== -1) {
                if (options.force) {
                    /* tslint:disable-next-line no-floating-promises */
                    this.pages[index].page.close();
                    this.pages[index].page = yield this.browser.newPage();
                }
            }
            else {
                this.pages.push({ name, page: yield this.browser.newPage() });
                index = this.pages.length - 1;
            }
            if (!options.stayCurrent) {
                this.currentPageIndex = index;
            }
        }), error_1.prepareStackTrace());
        return this;
    }
    switchPage(name) {
        this.push(() => {
            if (typeof name === 'string') {
                const index = this.pages.findIndex(page => page.name === name);
                /* istanbul ignore if */
                if (index === -1) {
                    throw new Error(`No such page whose name is "${name}".`);
                }
                else {
                    this.currentPageIndex = index;
                }
            }
            else {
                this.currentPageIndex = name;
            }
        }, error_1.prepareStackTrace());
        return this;
    }
    closePage(name) {
        this.push(() => __awaiter(this, void 0, void 0, function* () {
            let index;
            if (name) {
                index = this.pages.findIndex(page => page.name === name);
                if (index === -1) {
                    return;
                }
                else {
                    yield this.pages[index].page.close();
                    if (this.currentPageIndex === index) {
                        this.currentPageIndex = index - 1;
                    }
                    this.pages.splice(index, 1);
                }
            }
            else {
                yield this.page.close();
                index = this.pages.findIndex(({ page }) => page === this.page);
                this.pages.splice(index, 1);
                this.currentPageIndex = index - 1;
            }
        }), error_1.prepareStackTrace());
        return this;
    }
    pagesCount() {
        return new Promise(fulfill => this.push(() => fulfill(this.pages.length)));
    }
    forward(options) {
        this.push(() => __awaiter(this, void 0, void 0, function* () {
            yield this.page.goForward(options);
        }), error_1.prepareStackTrace());
        return this;
    }
    back(options) {
        this.push(() => __awaiter(this, void 0, void 0, function* () { return yield this.page.goBack(options); }), error_1.prepareStackTrace());
        return this;
    }
    refresh(options) {
        this.push(() => __awaiter(this, void 0, void 0, function* () { return yield this.page.reload(options); }), error_1.prepareStackTrace());
        return this;
    }
    evaluate(fn, ...args) {
        const stringified = typeof fn === 'string' ? fn : serializeFunc(fn, ...args);
        this.push(() => __awaiter(this, void 0, void 0, function* () { return yield this.page.evaluate(stringified); }), error_1.prepareStackTrace());
        return this;
    }
    evaluateWithReturn(fn, ...args) {
        const stringified = typeof fn === 'string' ? fn : serializeFunc(fn, ...args);
        return new Promise(resolve => {
            this.push(() => __awaiter(this, void 0, void 0, function* () {
                const returnValue = yield this.page.evaluate(stringified);
                resolve(returnValue);
            }));
        });
    }
    withUserAgent(userAgent) {
        this.push(() => __awaiter(this, void 0, void 0, function* () {
            yield this.page.setUserAgent(userAgent);
        }), error_1.prepareStackTrace());
        return this;
    }
    saveScreenshot(path, options) {
        this.push(() => __awaiter(this, void 0, void 0, function* () {
            yield this.page.screenshot(Object.assign({}, options, { path }));
        }), error_1.prepareStackTrace());
        return this;
    }
    savePDF(path, options) {
        this.push(() => __awaiter(this, void 0, void 0, function* () {
            yield this.page.pdf(Object.assign({}, options, { path }));
        }), error_1.prepareStackTrace());
        return this;
    }
    waitForNavigation(timeout) {
        this.push(() => __awaiter(this, void 0, void 0, function* () { return yield this.page.waitForNavigation({ timeout }); }), error_1.prepareStackTrace());
        return this;
    }
    waitForElement(selector, timeout) {
        this.push(() => __awaiter(this, void 0, void 0, function* () {
            return yield this.page.waitForSelector(selector, { timeout });
        }), error_1.prepareStackTrace());
        return this;
    }
    waitForEvaluation(fn, timeout, ...args) {
        const stringified = typeof fn === 'string' ? fn : serializeFunc(fn, ...args);
        this.push(() => __awaiter(this, void 0, void 0, function* () { return yield this.page.waitForFunction(stringified, { timeout }); }), error_1.prepareStackTrace());
        return this;
    }
    withAuth(username, password) {
        this.push(() => __awaiter(this, void 0, void 0, function* () { return yield this.page.authenticate({ username, password }); }), error_1.prepareStackTrace());
        return this;
    }
    withHeaders(headers) {
        this.push(() => __awaiter(this, void 0, void 0, function* () { return yield this.page.setExtraHTTPHeaders(headers); }), error_1.prepareStackTrace());
        return this;
    }
    addScriptTag(type, value, options = { esModule: false }) {
        this.push(() => __awaiter(this, void 0, void 0, function* () {
            return yield this.page.addScriptTag({
                [type]: value,
                type: options.esModule ? 'module' : undefined
            });
        }), error_1.prepareStackTrace());
        return this;
    }
    addStyleTag(type, value) {
        this.push(() => __awaiter(this, void 0, void 0, function* () { return yield this.page.addStyleTag({ [type]: value }); }), error_1.prepareStackTrace());
        return this;
    }
}
exports.default = Page;
