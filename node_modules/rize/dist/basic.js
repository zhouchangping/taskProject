"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const infrastructure_1 = __importDefault(require("./infrastructure"));
const error_1 = require("./utils/error");
class Basic extends infrastructure_1.default {
    sleep(ms) {
        this.push(() => __awaiter(this, void 0, void 0, function* () { return yield this.page.waitFor(ms); }), error_1.prepareStackTrace());
        return this;
    }
    execute(fn) {
        this.push(() => fn.call(this, this.browser, this.page), error_1.prepareStackTrace());
        return this;
    }
    end(callback) {
        this.push(this.hooks.beforeExit.bind(this));
        if (callback) {
            this.push(() => __awaiter(this, void 0, void 0, function* () {
                yield this.browser.close();
                callback();
            }), error_1.prepareStackTrace());
            return;
        }
        else {
            return new Promise((resolve, reject) => {
                this.push(() => __awaiter(this, void 0, void 0, function* () {
                    try {
                        yield this.browser.close();
                        resolve();
                    }
                    catch (error) {
                        /* istanbul ignore next */
                        reject(error);
                    }
                }), error_1.prepareStackTrace());
            });
        }
    }
    awaitPromise() {
        return new Promise(fulfill => this.push(fulfill));
    }
}
exports.default = Basic;
