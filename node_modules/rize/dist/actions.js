"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const infrastructure_1 = __importDefault(require("./infrastructure"));
const error_1 = require("./utils/error");
class Actions extends infrastructure_1.default {
    click(selector) {
        this.push(() => __awaiter(this, void 0, void 0, function* () { return yield this.page.click(selector); }), error_1.prepareStackTrace());
        return this;
    }
    doubleClick(selector) {
        this.push(() => __awaiter(this, void 0, void 0, function* () { return yield this.page.click(selector, { clickCount: 2 }); }), error_1.prepareStackTrace());
        return this;
    }
    rightClick(selector) {
        this.push(() => __awaiter(this, void 0, void 0, function* () { return yield this.page.click(selector, { button: 'right' }); }), error_1.prepareStackTrace());
        return this;
    }
    clickLink(text) {
        this.push(() => __awaiter(this, void 0, void 0, function* () {
            yield this.page.evaluate(
            /* istanbul ignore next, instrumenting cannot be executed in browser */
            (t) => {
                const element = Array
                    .from(document.querySelectorAll('a'))
                    .find(el => (el.textContent || '').trim() === t);
                if (element) {
                    element.click();
                }
                else {
                    throw new Error(`Cannot find an element with text "${text}"`);
                }
            }, text);
        }), error_1.prepareStackTrace());
        return this;
    }
    hover(selector) {
        this.push(() => __awaiter(this, void 0, void 0, function* () { return yield this.page.hover(selector); }), error_1.prepareStackTrace());
        return this;
    }
    type(selector, text) {
        this.push(() => __awaiter(this, void 0, void 0, function* () { return yield this.page.type(selector, text); }), error_1.prepareStackTrace());
        return this;
    }
    sendChar(char) {
        this.push(() => __awaiter(this, void 0, void 0, function* () { return yield this.page.keyboard.sendCharacter(char); }), error_1.prepareStackTrace());
        return this;
    }
    clear(selector) {
        this.push(() => __awaiter(this, void 0, void 0, function* () {
            yield this.page.$eval(selector, 
            /* istanbul ignore next, instrumenting cannot be executed in browser */
            element => {
                if (element.tagName === 'INPUT') {
                    element.value = '';
                }
                else if (element.tagName === 'TEXTAREA') {
                    element.textContent = '';
                }
                else {
                    // Don't throw error.
                    return;
                }
            });
        }), error_1.prepareStackTrace());
        return this;
    }
    focus(selector) {
        this.push(() => __awaiter(this, void 0, void 0, function* () { return yield this.page.focus(selector); }), error_1.prepareStackTrace());
        return this;
    }
    blur(selector) {
        this.push(() => __awaiter(this, void 0, void 0, function* () {
            return yield this.page.$eval(selector, 
            /* istanbul ignore next, instrumenting cannot be executed in browser */
            element => element.blur());
        }));
        return this;
    }
    select(selector, values) {
        this.push(() => __awaiter(this, void 0, void 0, function* () {
            if (Array.isArray(values)) {
                yield this.page.select(selector, ...values);
            }
            else {
                yield this.page.select(selector, values);
            }
        }), error_1.prepareStackTrace());
        return this;
    }
    check(selector) {
        this.push(() => __awaiter(this, void 0, void 0, function* () {
            yield this.page.$eval(selector, 
            /* istanbul ignore next, instrumenting cannot be executed in browser */
            element => element.checked = true);
        }), error_1.prepareStackTrace());
        return this;
    }
    uncheck(selector) {
        this.push(() => __awaiter(this, void 0, void 0, function* () {
            yield this.page.$eval(selector, 
            /* istanbul ignore next, instrumenting cannot be executed in browser */
            element => element.checked = false);
        }), error_1.prepareStackTrace());
        return this;
    }
    radio(selector, value) {
        this.push(() => __awaiter(this, void 0, void 0, function* () {
            yield this.page.$eval(`${selector}[value="${value}"]`, 
            /* istanbul ignore next, instrumenting cannot be executed in browser */
            element => element.checked = true);
        }), error_1.prepareStackTrace());
        return this;
    }
    press(key, selector) {
        this.push(() => __awaiter(this, void 0, void 0, function* () {
            if (selector) {
                const element = yield this.page.$(selector);
                /* istanbul ignore else TODO */
                if (element) {
                    yield element.press(key);
                }
                else {
                    throw new Error(`Error: failed to find element matching selector "${selector}".`);
                }
            }
            else {
                yield this.page.keyboard.press(key);
            }
        }), error_1.prepareStackTrace());
        return this;
    }
    keyDown(key) {
        this.push(() => __awaiter(this, void 0, void 0, function* () { return yield this.page.keyboard.down(key); }), error_1.prepareStackTrace());
        return this;
    }
    keyUp(key) {
        this.push(() => __awaiter(this, void 0, void 0, function* () { return yield this.page.keyboard.up(key); }), error_1.prepareStackTrace());
        return this;
    }
    mouseMoveTo(x, y) {
        this.push(() => __awaiter(this, void 0, void 0, function* () { return yield this.page.mouse.move(x, y); }), error_1.prepareStackTrace());
        return this;
    }
    mouseClick(x, y, options) {
        this.push(() => __awaiter(this, void 0, void 0, function* () { return yield this.page.mouse.click(x, y, options); }), error_1.prepareStackTrace());
        return this;
    }
    mouseDown(button = 'left', clickCount = 1) {
        this.push(() => __awaiter(this, void 0, void 0, function* () { return yield this.page.mouse.down({ button, clickCount }); }), error_1.prepareStackTrace());
        return this;
    }
    mouseUp(button = 'left', clickCount = 1) {
        this.push(() => __awaiter(this, void 0, void 0, function* () { return yield this.page.mouse.up({ button, clickCount }); }), error_1.prepareStackTrace());
        return this;
    }
    uploadFile(selector, path) {
        this.push(() => __awaiter(this, void 0, void 0, function* () {
            const element = yield this.page.$(selector);
            /* istanbul ignore else TODO */
            if (element) {
                yield element.uploadFile(path);
            }
            else {
                throw new Error(`Error: failed to find element matching selector "${selector}".`);
            }
        }), error_1.prepareStackTrace());
        return this;
    }
    addClass(selector, className) {
        this.push(() => __awaiter(this, void 0, void 0, function* () {
            yield this.page.$eval(selector, 
            /* istanbul ignore next, instrumenting cannot be executed in browser */
            (element, cls) => element.classList.add(cls), className);
        }), error_1.prepareStackTrace());
        return this;
    }
    removeClass(selector, className) {
        this.push(() => __awaiter(this, void 0, void 0, function* () {
            yield this.page.$eval(selector, 
            /* istanbul ignore next, instrumenting cannot be executed in browser */
            (element, cls) => element.classList.remove(cls), className);
        }), error_1.prepareStackTrace());
        return this;
    }
    toggleClass(selector, className) {
        this.push(() => __awaiter(this, void 0, void 0, function* () {
            yield this.page.$eval(selector, 
            /* istanbul ignore next, instrumenting cannot be executed in browser */
            (element, cls) => element.classList.toggle(cls), className);
        }), error_1.prepareStackTrace());
        return this;
    }
    setCookie(...cookies) {
        this.push(() => __awaiter(this, void 0, void 0, function* () { return yield this.page.setCookie(...cookies); }), error_1.prepareStackTrace());
        return this;
    }
    deleteCookie(...cookies) {
        this.push(() => __awaiter(this, void 0, void 0, function* () { return yield this.page.deleteCookie(...cookies); }), error_1.prepareStackTrace());
        return this;
    }
}
exports.default = Actions;
