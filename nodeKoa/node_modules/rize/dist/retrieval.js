"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const url_1 = __importDefault(require("url"));
const crypto_1 = __importDefault(require("crypto"));
const infrastructure_1 = __importDefault(require("./infrastructure"));
const error_1 = require("./utils/error");
class Retrieval extends infrastructure_1.default {
    title() {
        return new Promise((resolve, reject) => {
            this.push(() => __awaiter(this, void 0, void 0, function* () {
                try {
                    resolve(yield this.page.title());
                }
                catch (error) {
                    reject(error);
                }
            }));
        });
    }
    text(selector = 'body') {
        return new Promise((resolve, reject) => {
            this.push(() => __awaiter(this, void 0, void 0, function* () {
                try {
                    const text = yield this.page.$eval(selector, 
                    /* Instrumenting cannot be executed in browser. */
                    /* istanbul ignore next */
                    element => element.textContent);
                    resolve(text);
                }
                catch (error) {
                    reject(error);
                }
            }));
        });
    }
    html(selector = 'html', range = 'inner') {
        return new Promise((resolve, reject) => {
            this.push(() => __awaiter(this, void 0, void 0, function* () {
                try {
                    const html = yield this.page.$eval(selector, 
                    /* Instrumenting cannot be executed in browser. */
                    /* istanbul ignore next */
                    (element, r) => r === 'outer'
                        ? element.outerHTML
                        : element.innerHTML, range);
                    resolve(html);
                }
                catch (error) {
                    reject(error);
                }
            }));
        });
    }
    attribute(selector, attribute) {
        return new Promise((resolve, reject) => {
            this.push(() => __awaiter(this, void 0, void 0, function* () {
                try {
                    const value = yield this.page.$eval(selector, 
                    /* Instrumenting cannot be executed in browser. */
                    /* istanbul ignore next */
                    (element, attr) => element.getAttribute(attr), attribute);
                    resolve(value);
                }
                catch (error) {
                    reject(error);
                }
            }));
        });
    }
    style(selector, property) {
        return new Promise((resolve, reject) => {
            this.push(() => __awaiter(this, void 0, void 0, function* () {
                try {
                    const value = yield this.page.$eval(selector, 
                    /* Instrumenting cannot be executed in browser. */
                    /* istanbul ignore next */
                    (element, prop) => element.style.getPropertyValue(prop), property);
                    resolve(value);
                }
                catch (error) {
                    reject(error);
                }
            }));
        });
    }
    value(selector, newValue) {
        if (newValue) {
            this.push(() => __awaiter(this, void 0, void 0, function* () {
                yield this.page.$eval(selector, 
                /* Instrumenting cannot be executed in browser. */
                /* istanbul ignore next */
                (element, val) => element.value = val, newValue);
            }), error_1.prepareStackTrace());
            return this;
        }
        else {
            return this.attribute(selector, 'value');
        }
    }
    hasClass(selector, className) {
        return new Promise((resolve, reject) => {
            this.push(() => __awaiter(this, void 0, void 0, function* () {
                try {
                    const exists = yield this.page.$eval(selector, 
                    /* Instrumenting cannot be executed in browser. */
                    /* istanbul ignore next */
                    (element, cls) => element.classList.contains(cls), className);
                    resolve(exists);
                }
                catch (error) {
                    reject(error);
                }
            }));
        });
    }
    url() {
        return new Promise(fulfill => {
            this.push(() => fulfill(this.page.url()));
        });
    }
    queryString(key) {
        return new Promise(fulfill => {
            this.push(() => {
                const { query } = url_1.default.parse(this.page.url(), true);
                fulfill(query[key]);
            });
        });
    }
    cookie() {
        return new Promise((resolve, reject) => {
            this.push(() => __awaiter(this, void 0, void 0, function* () {
                try {
                    resolve((yield this.page.cookies())[0]);
                }
                catch (error) {
                    reject(error);
                }
            }));
        });
    }
    cookies() {
        return new Promise((resolve, reject) => {
            this.push(() => __awaiter(this, void 0, void 0, function* () {
                try {
                    resolve(yield this.page.cookies());
                }
                catch (error) {
                    reject(error);
                }
            }));
        });
    }
    isVisible(selector) {
        return new Promise((resolve, reject) => {
            this.push(() => __awaiter(this, void 0, void 0, function* () {
                try {
                    const result = yield this.page.$eval(selector, 
                    /* Instrumenting cannot be executed in browser. */
                    /* istanbul ignore next */
                    element => element.style.display);
                    resolve(result !== 'none');
                }
                catch (error) {
                    reject(error);
                }
            }));
        });
    }
    isPresent(selector) {
        return new Promise((resolve, reject) => {
            this.push(() => __awaiter(this, void 0, void 0, function* () {
                try {
                    const element = yield this.page.$(selector);
                    resolve(!!element);
                }
                catch (error) {
                    reject(error);
                }
            }));
        });
    }
    find(selector, fn, ...args) {
        const random = crypto_1.default.randomBytes(10).toString('hex');
        this.push(() => __awaiter(this, void 0, void 0, function* () {
            yield this.page.$eval(selector, 
            /* Instrumenting cannot be executed in browser. */
            /* istanbul ignore next */
            (element, id) => element.setAttribute('data-rize', id), random);
        }));
        const returnValue = fn.call(this, `[data-rize="${random}"]`, ...args);
        this.push(() => __awaiter(this, void 0, void 0, function* () {
            yield this.page.$eval(`[data-rize="${random}"]`, 
            /* istanbul ignore next, Instrumenting cannot be executed in browser. */
            element => element.removeAttribute('data-rize'));
        }));
        return returnValue;
    }
    findAll(selector, index, fn, ...args) {
        const random = crypto_1.default.randomBytes(10).toString('hex');
        this.push(() => __awaiter(this, void 0, void 0, function* () {
            yield this.page.$$eval(selector, 
            /* Instrumenting cannot be executed in browser. */
            /* istanbul ignore next */
            (elements, i, id) => elements[i].setAttribute('data-rize', id), index, random);
        }));
        const returnValue = fn.call(this, `[data-rize="${random}"]`, ...args);
        this.push(() => __awaiter(this, void 0, void 0, function* () {
            yield this.page.$$eval(`[data-rize="${random}"]`, 
            /* istanbul ignore next, Instrumenting cannot be executed in browser. */
            elements => Array
                .from(elements)
                .forEach(element => element.removeAttribute('data-rize')));
        }));
        return returnValue;
    }
    findByXPath(expression, index, fn, ...args) {
        const random = crypto_1.default.randomBytes(10).toString('hex');
        this.push(() => __awaiter(this, void 0, void 0, function* () {
            yield this.page.evaluate(
            /* Instrumenting cannot be executed in browser. */
            /* istanbul ignore next */
            (expr, i, id) => {
                const elements = document.evaluate(expr, document, null, XPathResult.ANY_TYPE, null);
                let element = elements.iterateNext();
                let it = 0;
                while (element && it < i) {
                    element = elements.iterateNext();
                    it++;
                }
                void element.setAttribute('data-rize', id);
            }, expression, index, random);
        }));
        const returnValue = fn.call(this, `[data-rize="${random}"]`, ...args);
        this.push(() => __awaiter(this, void 0, void 0, function* () {
            yield this.page.$$eval(`[data-rize="${random}"]`, 
            /* istanbul ignore next, Instrumenting cannot be executed in browser. */
            elements => Array
                .from(elements)
                .forEach(element => element.removeAttribute('data-rize')));
        }));
        return returnValue;
    }
    findWithText(selector, text, index, fn, ...args) {
        const random = crypto_1.default.randomBytes(10).toString('hex');
        this.push(() => __awaiter(this, void 0, void 0, function* () {
            yield this.page.evaluate(
            /* Instrumenting cannot be executed in browser. */
            /* istanbul ignore next */
            (sel, t, i, id) => {
                const element = Array
                    .from(document.querySelectorAll(sel))
                    .filter(el => (el.textContent || '').includes(t))[i];
                element.setAttribute('data-rize', id);
            }, selector, text, index, random);
        }));
        const returnValue = fn.call(this, `[data-rize="${random}"]`, ...args);
        this.push(() => __awaiter(this, void 0, void 0, function* () {
            yield this.page.$eval(`[data-rize="${random}"]`, 
            /* istanbul ignore next, Instrumenting cannot be executed in browser. */
            element => element.removeAttribute('data-rize'));
        }));
        return returnValue;
    }
    viewport() {
        return new Promise(fulfill => this.push(() => fulfill(this.page.viewport())));
    }
}
exports.default = Retrieval;
