"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const events_1 = __importDefault(require("events"));
const error_1 = require("./utils/error");
class Infrastructure {
    constructor() {
        this.queue = [];
        this.eventBus = new events_1.default();
        this.hooks = {
            beforeLaunch() { },
            afterLaunched() { },
            beforeEachStep() { },
            afterEachStep() { },
            beforeExit() { }
        };
        this.currentPageIndex = 0;
        this.pages = [];
    }
    /**
     * Low-level instance of puppeteer's browser.
     */
    get browser() {
        return this._browser;
    }
    /**
     * Low-level instance of puppeteer's current page.
     */
    get page() {
        const currentPage = this.pages[this.currentPageIndex];
        return currentPage ? currentPage.page : this.preservePage;
    }
    push(fn, trace) {
        const unique = Symbol();
        this.queue.push(unique);
        this.eventBus.once(unique, () => __awaiter(this, void 0, void 0, function* () {
            this.hooks.beforeEachStep.call(this);
            try {
                yield fn();
            }
            catch (error) {
                if (trace) {
                    throw error_1.beautifyStack(trace, error);
                }
                else {
                    throw error;
                }
            }
            finally {
                this.hooks.afterEachStep.call(this);
                this.eventBus.emit(this.queue[this.queue.indexOf(unique) + 1]);
                this.queue.shift();
            }
        }));
        if (this.browser && this.page && this.queue.length === 1) {
            this.eventBus.emit(unique);
        }
        return this;
    }
    clearQueue() {
        this.push(() => (this.queue = []));
        return this;
    }
    clearQueueNow() {
        this.queue = [];
        return this;
    }
}
exports.default = Infrastructure;
